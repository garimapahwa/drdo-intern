import numpy as np
import matplotlib.pyplot as plt
from art.estimators.classification import PyTorchClassifier
from art.attacks.evasion import ZooAttack
import torch
import torch.nn as nn

model = nn.Sequential(
    nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1),
    nn.ReLU(),
    nn.MaxPool2d(kernel_size=2, stride=2),
    nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),
    nn.ReLU(),
    nn.MaxPool2d(kernel_size=2, stride=2),
    nn.Flatten(),
    nn.Linear(64 * 16 * 16, 128),
    nn.ReLU(),
    nn.Linear(128, 10),
    nn.LogSoftmax(dim=1)
)

image_path = '/content/test_1.JPEG'
input_image = plt.imread('/content/test_1.JPEG.jpg')
input_image = np.transpose(input_image, (2, 0, 1))  
input_image = np.expand_dims(input_image, axis=0)  

classifier = PyTorchClassifier(
    model=model,
    loss=nn.CrossEntropyLoss(),
    input_shape=(3, 64, 64),  
    nb_classes=10,
    clip_values=(0, 1),
)

zoo_attack = ZooAttack(
    classifier,
    confidence=0.0,
    targeted=False,
    learning_rate=0.001,
    max_iter=10,
    binary_search_steps=1,
    initial_const=0.001,
    abort_early=True,
    use_resize=True,
    use_importance=True,
    nb_parallel=128,
    batch_size=1,
    variable_h=0.01,
    verbose=True
)

adversarial_examples = zoo_attack.generate(input_image)
original_pred = np.argmax(classifier.predict(input_image))


predictions = np.argmax(classifier.predict(adversarial_examples)[0])
print(f"Predictions on Adversarial Example: {predictions}")
print(f"Original Prediction: {original_pred}")
